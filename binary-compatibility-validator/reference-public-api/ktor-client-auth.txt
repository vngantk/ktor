public final class io/ktor/client/features/auth/Auth {
	public static final field Feature Lio/ktor/client/features/auth/Auth$Feature;
	public fun <init> ()V
	public fun <init> (Ljava/util/List;)V
	public synthetic fun <init> (Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun getProviders ()Ljava/util/List;
}

public final class io/ktor/client/features/auth/Auth$Feature : io/ktor/client/features/HttpClientFeature {
	public fun getKeyMaterial ()Lio/ktor/util/AttributeKey;
	public fun install (Lio/ktor/client/features/auth/Auth;Lio/ktor/client/HttpClient;)V
	public synthetic fun install (Ljava/lang/Object;Lio/ktor/client/HttpClient;)V
	public fun prepare (Lkotlin/jvm/functions/Function1;)Lio/ktor/client/features/auth/Auth;
	public synthetic fun prepare (Lkotlin/jvm/functions/Function1;)Ljava/lang/Object;
}

public abstract interface class io/ktor/client/features/auth/AuthProvider {
	public abstract fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
}

public final class io/ktor/client/features/auth/providers/BasicAuthConfig {
	public field password Ljava/lang/String;
	public field username Ljava/lang/String;
	public fun <init> ()V
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public final fun setPassword (Ljava/lang/String;)V
	public final fun setRealm (Ljava/lang/String;)V
	public final fun setUsername (Ljava/lang/String;)V
}

public final class io/ktor/client/features/auth/providers/BasicAuthProvider : io/ktor/client/features/auth/AuthProvider {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
}

public final class io/ktor/client/features/auth/providers/BasicAuthProviderKt {
	public static final fun basic (Lio/ktor/client/features/auth/Auth;Lkotlin/jvm/functions/Function1;)V
}

public final class io/ktor/client/features/auth/providers/DigestAuthConfig {
	public fun <init> ()V
	public final fun getAlgorithmName ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public final fun setAlgorithmName (Ljava/lang/String;)V
	public final fun setPassword (Ljava/lang/String;)V
	public final fun setRealm (Ljava/lang/String;)V
	public final fun setUsername (Ljava/lang/String;)V
}

public final class io/ktor/client/features/auth/providers/DigestAuthProvider : io/ktor/client/features/auth/AuthProvider {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun addRequestHeaders (Lio/ktor/client/request/HttpRequestBuilder;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getAlgorithmName ()Ljava/lang/String;
	public final fun getPassword ()Ljava/lang/String;
	public final fun getRealm ()Ljava/lang/String;
	public final fun getUsername ()Ljava/lang/String;
	public fun isApplicable (Lio/ktor/http/auth/HttpAuthHeader;)Z
}

public final class io/ktor/client/features/auth/providers/DigestAuthProviderKt {
	public static final fun digest (Lio/ktor/client/features/auth/Auth;Lkotlin/jvm/functions/Function1;)V
}

